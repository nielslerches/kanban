{"version":3,"sources":["state/services/index.js","routing.js","components/SimpleForm.js","components/Project.js","components/Panel.js","components/StandardLayout.js","components/Dashboard.js","App.js","serviceWorker.js","state/initialStates/dashboards.js","state/reducers/dashboards.js","state/initialStates/panels.js","state/reducers/panels.js","state/initialStates/key-value.js","state/reducers/key-value.js","state/initialStates/projects.js","state/reducers/projects.js","state/initialStates/columns.js","state/reducers/columns.js","state/reducers/index.js","state/initialStates/index.js","index.js"],"names":["ServicesContext","createContext","createServices","state","dispatch","getDashboards","filter","dashboards","ids","map","id","data","dashboard","slug","slugify","name","lower","panels","getPanels","panel","panelId","includes","getProjects","projects","project","columns","getColumns","column","projectId","sort","a","b","ordering","getDashboardBySlug","getDefaultDashboard","keyValue","getProjectById","getProjectBySlug","createProject","description","uuid","type","payload","editProject","createColumn","length","useServices","useContext","views","reverse","value","Error","args","SimpleForm","spec","onSubmit","submitText","children","useReducer","_state","key","_validate","validate","Form","e","preventDefault","label","props","FormGroup","row","Label","for","sm","className","Col","Input","onChange","target","placeholder","Button","disabled","color","ProjectLayout","Row","md","Nav","vertical","NavItem","tag","Link","to","Projects","slice","Card","CardHeader","CardBody","ListGroup","flush","ListGroupItem","CreateProject","store","useStore","history","useHistory","defaultDashboard","Container","Boolean","rows","getState","push","Project","CardText","EditProject","Workboard","useState","creatingColumn","setCreatingColumn","toggleSetCreatingColumn","Modal","isOpen","toggle","ModalHeader","ModalBody","SimplePanel","TYPE_TO_RENDERER","text","Panel","InternalPanel","NavLink","RouterLink","StandardLayout","Dashboard","App","Navbar","dark","expand","NavbarBrand","process","fluid","exact","path","component","match","params","source","window","location","hostname","DASHBOARDS_INITIAL_STATE","PANELS_INITIAL_STATE","panelsReducer","createReducer","CREATE_PANEL","KEY_VALUE_INITIAL_STATE","keyValueReducer","SET_KEY_VALUE","PROJECTS_INITIAL_STATE","projectsReducer","CREATE_PROJECT","EDIT_PROJECT","COLUMNS_INITIAL_STATE","columnsReducer","CREATE_COLUMN","rootReducer","combineReducers","dashboardId","initialState","persistedState","JSON","parse","localStorage","getItem","configureStore","reducer","preloadedState","middleware","getDefaultMiddleware","devTools","subscribe","setItem","stringify","ReactDOM","render","useSelector","useDispatch","services","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.866c2381.chunk.js","sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport uuid from 'uuid/v4';\nimport { element, node, oneOf } from 'prop-types';\nimport slugify from 'slug';\n\nconst ServicesContext = createContext();\n\nexport const createServices = (state, dispatch) => {\n  const getDashboards = (filter) => {\n    if (!filter) filter = () => true;\n\n    return state.dashboards.ids\n      .map(id => state.dashboards.data[id])\n      .map(dashboard => ({\n        ...dashboard,\n        slug: slugify(dashboard.name, { lower: true }),\n        panels: getPanels((panel) => dashboard.panels.map(({ panelId }) => panelId).includes(panel.id))\n      }))\n      .filter(filter);\n  };\n\n  const getPanels = (filter) => {\n    if (!filter) filter = () => true;\n\n    return state.panels.ids\n      .map(id => state.panels.data[id])\n      .filter(filter);\n  };\n\n  const getDashboardBySlug = slug => getDashboards(dashboard => dashboard.slug === slug)[0];\n  const getDefaultDashboard = () => getDashboards(dashboard => dashboard.id === state.keyValue['default-dashboard'])[0];\n\n  const getProjects = (filter) => {\n    if (!filter) filter = () => true;\n\n    return state.projects.ids\n      .map(id => state.projects.data[id])\n      .map(project => ({\n        ...project,\n        slug: slugify(project.name, { lower: true }),\n        columns: getColumns((column) => column.projectId === project.id),\n      }))\n      .filter(filter);\n  };\n\n  const getProjectById = (id) => getProjects((project) => project.id === id)[0];\n  const getProjectBySlug = (slug) => getProjects((project) => project.slug === slug)[0];\n\n  const createProject = (name, description) => {\n    const id = uuid();\n\n    dispatch({ type: 'CREATE_PROJECT', payload: { id, name, description } });\n\n    return id;\n  };\n\n  const editProject = (id, name, description) => {\n    dispatch({ type: 'EDIT_PROJECT', payload: { id, name, description } });\n  };\n\n  const getColumns = (filter) => {\n    if (!filter) filter = () => true;\n\n    return state.columns.ids\n      .map(id => state.columns.data[id])\n      .sort((a, b) => a.ordering - b.ordering)\n      .filter(filter);\n  }\n\n  const createColumn = (name, projectId) => {\n    const id = uuid();\n    const ordering = getColumns((column) => column.projectId === projectId).length;\n\n    dispatch({ type: 'CREATE_COLUMN', payload: { id, name, projectId, ordering } });\n\n    return id;\n  };\n\n  return {\n    getDashboards,\n    getPanels,\n    getDashboardBySlug,\n    getDefaultDashboard,\n    getProjects,\n    getProjectById,\n    getProjectBySlug,\n    createProject,\n    editProject,\n    getColumns,\n    createColumn,\n  };\n};\n\nexport const ServicesProvider = ({ children }) => {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const services = createServices(state, dispatch);\n\n  return (\n    <ServicesContext.Provider\n      value={services}\n    >\n      {children}\n    </ServicesContext.Provider>\n  );\n};\nexport const useServices = () => useContext(ServicesContext);\n\nServicesProvider.propTypes = {\n  children: oneOf([element, node])\n};\n","const views = {\n  'dashboards-dashboard-view': (slug) => `/dashboards/dashboard/view/${slug}`,\n  'projects-project-view': (slug) => `/projects/project/view/${slug}`,\n  'projects-projects-view': '/projects/projects/view',\n  'projects-project-create': '/projects/project/create',\n  'projects-project-edit': (slug) => `/projects/project/edit/${slug}`,\n  'projects-workboard-view': (slug) => `/projects/workboard/view/${slug}`,\n};\n\nexport const reverse = (name, ...args) => {\n  const value = views[name];\n  if (!value) {\n    throw new Error(`unknown view with name ${name}`);\n  }\n\n  if (typeof value === 'function') {\n    return value(...args);\n  }\n\n  return value;\n};\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, Label, Col, Input, Button } from 'reactstrap';\n\nexport const SimpleForm = ({ data, spec, onSubmit, submitText, children }) => {\n  const [state, dispatch] = useReducer((_state, { key, value }) => ({ ..._state, [key]: value }), data);\n\n  const _validate = (state) => {\n    for (const { key, validate } of spec.filter(({ validate }) => validate)) {\n      if (!validate(state[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (_validate(state)) {\n          onSubmit(state);\n        }\n      }}\n    >\n      {spec.map(({ key, label, type, props }) => (\n        <FormGroup key={key} row>\n          <Label for={key} sm={2} className=\"text-right\">{label}</Label>\n          <Col sm={10}>\n            <Input\n              type={type}\n              id={key}\n              name={key}\n              value={state[key]}\n              onChange={e => dispatch({ key, value: e.target.value })}\n              placeholder={data[key] || label}\n              {...(props || {})}\n            />\n          </Col>\n        </FormGroup>\n      ))}\n      <FormGroup className=\"text-right\">\n        {children}\n        <Button disabled={!_validate(state)} color=\"primary\" className=\"ml-3\">{submitText}</Button>\n      </FormGroup>\n    </Form>\n  );\n};\n\nSimpleForm.propTypes = {\n  data: PropTypes.object.isRequired,\n  spec: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      props: PropTypes.object,\n      validate: PropTypes.func,\n    })\n  ),\n  onSubmit: PropTypes.func.isRequired,\n  submitText: PropTypes.string.isRequired,\n  children: PropTypes.element,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ModalBody, ListGroup, ListGroupItem, Col, Button, Container, Card, CardHeader, CardBody, CardText, Row, Modal, ModalHeader, Nav, NavItem, NavLink } from 'reactstrap';\nimport { Link, useHistory, Switch } from 'react-router-dom';\nimport { useStore } from 'react-redux';\n\nimport { useServices, createServices } from '../state/services';\nimport { reverse } from '../routing';\nimport { SimpleForm } from './SimpleForm';\n\nconst ProjectLayout = ({ slug, children }) => {\n  const { getProjectBySlug } = useServices();\n\n  const { name } = getProjectBySlug(slug);\n\n  return (\n    <Row>\n      <Col md=\"2\">\n        <Nav vertical>\n          <NavItem>\n            <NavLink tag={Link} to={reverse('projects-project-view', slug)}>{name}</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink tag={Link} to={reverse('projects-workboard-view', slug)}>Workboard</NavLink>\n          </NavItem>\n        </Nav>\n      </Col>\n      <Col md=\"10\">\n        <Switch>\n          {children}\n        </Switch>\n      </Col>\n    </Row>\n  );\n};\n\nProjectLayout.propTypes = {\n  slug: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport const Projects = () => {\n  const { getProjects } = useServices();\n\n  const projects = getProjects().slice(0, 3);\n\n  return (\n    <Card>\n      <CardHeader\n        className=\"d-flex justify-content-between align-items-center\"\n      >\n        <span>Projects</span>\n        <Button tag={Link} to={reverse('projects-projects-view')}>\n          View all\n        </Button>\n      </CardHeader>\n      {projects.length > 0 && (\n        <CardBody>\n          <ListGroup flush>\n            {projects.map(project => (\n              <ListGroupItem\n                key={project.id}\n                tag={Link}\n                to={reverse('projects-project-view', project.slug)}\n              >\n                {project.name}\n              </ListGroupItem>\n            ))}\n          </ListGroup>\n        </CardBody>\n      ) }\n    </Card>\n  );\n};\n\nexport const CreateProject = () => {\n  const store = useStore();\n  const history = useHistory();\n  const { createProject, getDefaultDashboard } = useServices();\n\n  const defaultDashboard = getDefaultDashboard();\n\n  return (\n    <Card>\n      <CardHeader>Create project</CardHeader>\n      <CardBody>\n        <Container>\n          <SimpleForm\n            data={{ name: '', description: '' }}\n            spec={[\n              {\n                key: 'name',\n                label: 'Name',\n                type: 'text',\n                validate: Boolean\n              },\n              {\n                key: 'description',\n                label: 'Description',\n                type: 'textarea',\n                validate: Boolean,\n                props: {\n                  rows: 10\n                }\n              }\n            ]}\n            onSubmit={({ name, description }) => {\n              const projectId = createProject(name, description);\n              const { getProjectById } = createServices(store.getState(), store.dispatch);\n              const project = getProjectById(projectId);\n              history.push(reverse('projects-project-view', project.slug));\n            }}\n            submitText=\"Create new project\"\n          >\n            <Button tag={Link} to={reverse('dashboards-dashboard-view', defaultDashboard.slug)}>Cancel</Button>\n          </SimpleForm>\n        </Container>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport const Project = ({ name, description, slug }) => {\n  return (\n    <ProjectLayout slug={slug}>\n      <Row>\n        <Col md=\"10\">\n          <Card>\n            <CardHeader>\n              {name}\n            </CardHeader>\n            <CardBody>\n              <Container>\n                {typeof description === 'string' ? <CardText>{description}</CardText> : description}\n              </Container>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col md=\"2\">\n          <Nav vertical>\n            <NavLink tag={Link} to={reverse('projects-project-edit', slug)}>Edit details</NavLink>\n          </Nav>\n        </Col>\n      </Row>\n    </ProjectLayout>\n  );\n};\n\nexport const EditProject = ({ slug }) => {\n  const store = useStore();\n  const history = useHistory();\n  const { editProject, getProjectBySlug } = useServices();\n\n  const { id, name, description } = getProjectBySlug(slug);\n\n  return (\n    <Card>\n      <CardHeader>Edit project</CardHeader>\n      <CardBody>\n        <Container>\n          <SimpleForm\n            data={{ name, description }}\n            spec={[\n              {\n                key: 'name',\n                label: 'Name',\n                type: 'text',\n                validate: Boolean\n              },\n              {\n                key: 'description',\n                label: 'Description',\n                type: 'textarea',\n                validate: Boolean,\n                props: {\n                  rows: 10\n                }\n              }\n            ]}\n            onSubmit={({ name, description }) => {\n              editProject(id, name, description);\n              const { getProjectById } = createServices(store.getState(), store.dispatch);\n              const project = getProjectById(id);\n              history.push(reverse('projects-project-view', project.slug));\n            }}\n            submitText=\"Save changes\"\n          >\n            <Button tag={Link} to={reverse('projects-project-view', slug)}>Cancel</Button>\n          </SimpleForm>\n        </Container>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport const Workboard = ({ slug }) => {\n  const [creatingColumn, setCreatingColumn] = useState(false);\n  const { createColumn, getProjectBySlug } = useServices();\n\n  const toggleSetCreatingColumn = () => setCreatingColumn(state => !state);\n\n  const { id, columns } = getProjectBySlug(slug);\n\n  return (\n    <ProjectLayout slug={slug}>\n      <Row>\n        {columns.map(column => (\n          <Col md=\"2\" key={column.id}>\n            <Card>\n              <CardHeader>{column.name}</CardHeader>\n              <CardBody>\n                <Card>\n                  <CardBody>\n                    <CardText>Foobar!!</CardText>\n                  </CardBody>\n                </Card>\n              </CardBody>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      <Modal isOpen={creatingColumn} toggle={toggleSetCreatingColumn}>\n        <ModalHeader toggle={toggleSetCreatingColumn}>Create column</ModalHeader>\n        <ModalBody>\n          <SimpleForm\n            data={{ name: '' }}\n            spec={[\n              {\n                key: 'name',\n                label: 'Name',\n                type: 'text',\n                validate: Boolean\n              },\n            ]}\n            onSubmit={({ name }) => {\n              createColumn(name, id);\n              toggleSetCreatingColumn();\n            }}\n            submitText=\"Create column\"\n          />\n        </ModalBody>\n      </Modal>\n    </ProjectLayout>\n  );\n};\n\nProject.propTypes = {\n  name: PropTypes.string.isRequired,\n  description: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  slug: PropTypes.string.isRequired,\n};\n\nEditProject.propTypes = {\n  slug: PropTypes.string.isRequired,\n};\n\nWorkboard.propTypes = {\n  slug: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardHeader, CardBody } from 'reactstrap';\nimport { Projects } from './Project';\n\nconst SimplePanel = ({ name, children }) => (\n  <Card>\n    <CardHeader>{name}</CardHeader>\n    <CardBody>{children}</CardBody>\n  </Card>\n);\n\nconst TextPanel = ({ name, data }) => <SimplePanel name={name}>{data}</SimplePanel>;\n\nconst TYPE_TO_RENDERER = {\n  text: TextPanel,\n  projects: Projects,\n};\n\nexport const Panel = ({ name, type, data }) => {\n  const InternalPanel = TYPE_TO_RENDERER[type];\n\n  return <InternalPanel name={name} data={data} />\n};\n\nPanel.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  data: PropTypes.any.isRequired,\n};\n\nTextPanel.propTypes = {\n  name: PropTypes.string.isRequired,\n  data: PropTypes.string.isRequired,\n};\n\nSimplePanel.propTypes = {\n  name: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col, Nav, NavItem, NavLink as Link } from 'reactstrap';\nimport { NavLink as RouterLink } from 'react-router-dom';\n\nimport { useServices } from '../state/services';\n\nimport { reverse } from '../routing';\n\nconst NavLink = (props) => <Link tag={RouterLink} {...props} />\n\nexport const StandardLayout = ({ children }) => {\n  const { getDashboards } = useServices();\n\n  const dashboards = getDashboards();\n\n  return (\n    <Row>\n      <Col md=\"2\">\n        <Nav vertical>\n          {dashboards.map(dashboard => (\n            <NavItem key={dashboard.id}>\n              <NavLink to={reverse('dashboards-dashboard-view', dashboard.slug)}>{dashboard.name}</NavLink>\n            </NavItem>\n          ))}\n        </Nav>\n        <hr />\n        <Nav vertical>\n          <NavItem>\n            <NavLink to={reverse('projects-projects-view')}>Projects</NavLink>\n          </NavItem>\n        </Nav>\n      </Col>\n      <Col md=\"10\">\n        {children}\n      </Col>\n    </Row>\n  );\n};\n\nStandardLayout.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Panel } from './Panel';\nimport { StandardLayout } from './StandardLayout';\n\nexport const Dashboard = ({ panels }) => {\n  return (\n    <StandardLayout>\n      {panels.map(panel => (\n        <Panel\n          key={panel.id}\n          name={panel.name}\n          type={panel.type}\n          data={panel.data}\n        />\n      ))}\n    </StandardLayout>\n  );\n};\n\nDashboard.propTypes = {\n  panels: PropTypes.array.isRequired,\n};\n","import React from 'react';\n\nimport { Switch, Route, Redirect } from 'react-router';\nimport Markdown from 'react-markdown';\n\nimport { Dashboard } from './components/Dashboard';\nimport { useServices } from './state/services';\n\nimport { reverse } from './routing';\nimport { CreateProject, Project, EditProject, Projects, Workboard } from './components/Project';\nimport { Navbar, NavbarBrand, Container } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nfunction App() {\n  const { getDashboardBySlug, getDefaultDashboard, getProjectBySlug } = useServices();\n\n  const defaultDashboard = getDefaultDashboard();\n\n  return (\n    <>\n      <Navbar color=\"dark\" dark expand=\"md\">\n        <NavbarBrand tag={Link} to=\"/\">{process.env.REACT_APP_NAME}</NavbarBrand>\n      </Navbar>\n      <Container fluid className=\"py-3\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => <Redirect to={reverse('dashboards-dashboard-view', defaultDashboard.slug)} />}\n          />\n          <Route\n            exact\n            path={reverse('dashboards-dashboard-view', ':slug')}\n            component={({ match: { params: { slug } } }) => {\n              const { panels } = getDashboardBySlug(slug);\n\n              return <Dashboard panels={panels} />;\n            }}\n          />\n          <Route\n            exact\n            path={reverse('projects-projects-view')}\n            component={Projects}\n          />\n          <Route\n            exact\n            path={reverse('projects-project-create')}\n            component={CreateProject}\n          />\n          <Route\n            exact\n            path={reverse('projects-project-view', ':slug')}\n            component={({ match: { params: { slug } } }) => {\n              const { id, name, description, columns } = getProjectBySlug(slug);\n\n              return (\n                <Project\n                  id={id}\n                  name={name}\n                  description={<Markdown source={description} />}\n                  slug={slug}\n                  columns={columns}\n                />\n              );\n            }}\n          />\n          <Route\n            exact\n            path={reverse('projects-project-edit', ':slug')}\n            component={({ match: { params: { slug } } }) => {\n              return (\n                <EditProject\n                  slug={slug}\n                />\n              );\n            }}\n          />\n          <Route\n            exact\n            path={reverse('projects-workboard-view', ':slug')}\n            component={({ match: { params: { slug } } }) => <Workboard slug={slug} />}\n          />\n        </Switch>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const DASHBOARDS_INITIAL_STATE = { data: {}, ids: [] };\n","import { DASHBOARDS_INITIAL_STATE } from \"../initialStates/dashboards\";\n\nexport const dashboardsReducer = (state = DASHBOARDS_INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case 'CREATE_DASHBOARD':\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [payload.id]: {\n            id: payload.id,\n            name: payload.name,\n            panels: []\n          }\n        },\n        ids: [...state.ids, payload.id]\n      };\n\n    case 'ADD_PANEL':\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [payload.dashboardId]: {\n            ...state.data[payload.dashboardId],\n            panels: [\n              ...state.data[payload.dashboardId].panels,\n              {\n                ordering: state.data[payload.dashboardId].panels.length,\n                panelId: payload.panelId\n              }\n            ]\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n","export const PANELS_INITIAL_STATE = { data: {}, ids: [] };\n","import { createReducer } from '@reduxjs/toolkit';\nimport { PANELS_INITIAL_STATE } from \"../initialStates/panels\";\n\nexport const panelsReducer = createReducer(PANELS_INITIAL_STATE, {\n  CREATE_PANEL: (state, { payload: { id, name, type, data } }) => {\n    state.data[id] = {\n      id,\n      name,\n      type,\n      data\n    };\n    state.ids.push(id);\n  }\n});\n","export const KEY_VALUE_INITIAL_STATE = {};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { KEY_VALUE_INITIAL_STATE } from '../initialStates/key-value';\n\nexport const keyValueReducer = createReducer(KEY_VALUE_INITIAL_STATE, {\n  SET_KEY_VALUE: (state, { payload: { key, value }}) => ({ ...state, [key]: value })\n});\n","export const PROJECTS_INITIAL_STATE = { data: {}, ids: [] };\n","import { createReducer } from '@reduxjs/toolkit';\nimport { PROJECTS_INITIAL_STATE } from \"../initialStates/projects\";\n\nexport const projectsReducer = createReducer(PROJECTS_INITIAL_STATE, {\n  CREATE_PROJECT: (state, { payload: { id, name, description } }) => {\n    state.data[id] = {\n      id,\n      name,\n      description,\n    };\n    state.ids.push(id);\n  },\n  EDIT_PROJECT: (state, { payload: { id, name, description } }) => {\n    state.data[id].name = name;\n    state.data[id].description = description;\n  },\n});\n","export const COLUMNS_INITIAL_STATE = { data: {}, ids: [] };\n","import { createReducer } from '@reduxjs/toolkit';\nimport { COLUMNS_INITIAL_STATE } from '../initialStates/columns';\n\nexport const columnsReducer = createReducer(COLUMNS_INITIAL_STATE, {\n  CREATE_COLUMN: (state, { payload: { id, name, projectId, ordering }}) => {\n    state.data[id] = {\n      id,\n      name,\n      projectId,\n      ordering,\n    };\n    state.ids.push(id);\n  },\n});\n","import { combineReducers } from \"redux\";\n\nimport { dashboardsReducer } from './dashboards';\nimport { panelsReducer } from './panels';\nimport { keyValueReducer } from \"./key-value\";\nimport { projectsReducer } from \"./projects\";\nimport { columnsReducer } from \"./columns\";\n\nexport const rootReducer = combineReducers({\n  dashboards: dashboardsReducer,\n  panels: panelsReducer,\n  keyValue: keyValueReducer,\n  projects: projectsReducer,\n  columns: columnsReducer,\n});\n","import { DASHBOARDS_INITIAL_STATE } from './dashboards';\nimport { PANELS_INITIAL_STATE } from './panels';\nimport { KEY_VALUE_INITIAL_STATE } from './key-value';\nimport { PROJECTS_INITIAL_STATE } from './projects';\nimport { COLUMNS_INITIAL_STATE } from './columns';\n\nexport const initialState = {\n  dashboards: DASHBOARDS_INITIAL_STATE,\n  panels: PANELS_INITIAL_STATE,\n  keyValue: KEY_VALUE_INITIAL_STATE,\n  projects: PROJECTS_INITIAL_STATE,\n  columns: COLUMNS_INITIAL_STATE,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ServicesProvider } from './state/services';\nimport { rootReducer as reducer } from './state/reducers';\nimport { initialState } from './state/initialStates';\nimport uuid from 'uuid/v4';\n\nconst persistedState = JSON.parse(localStorage.getItem('state'));\n\nconst store = configureStore({\n  reducer,\n  preloadedState: persistedState || initialState,\n  middleware: getDefaultMiddleware(),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nstore.subscribe(() => {\n  localStorage.setItem('state', JSON.stringify(store.getState()));\n});\n\nif (!persistedState) {\n  const dashboardId = uuid();\n  const panelId = uuid();\n\n  store.dispatch({ type: 'CREATE_DASHBOARD', payload: { id: dashboardId, name: 'Dashboard' } });\n  store.dispatch({ type: 'SET_KEY_VALUE', payload: { key: 'default-dashboard', value: dashboardId } });\n  store.dispatch({ type: 'CREATE_PANEL', payload: { id: panelId, name: 'Projects', type: 'projects' } });\n  store.dispatch({ type: 'ADD_PANEL', payload: { dashboardId, panelId } });\n}\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <ServicesProvider>\n        <App />\n      </ServicesProvider>\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}