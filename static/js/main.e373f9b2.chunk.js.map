{"version":3,"sources":["state/services/index.js","routing.js","components/Project.js","components/Panel.js","components/Dashboard.js","App.js","serviceWorker.js","state/initialStates/dashboards.js","state/reducers/dashboards.js","state/initialStates/panels.js","state/reducers/panels.js","state/initialStates/key-value.js","state/reducers/key-value.js","state/initialStates/projects.js","state/reducers/projects.js","state/reducers/index.js","state/initialStates/index.js","index.js"],"names":["ServicesContext","createContext","createServices","state","dispatch","getDashboards","filter","dashboards","ids","map","id","data","dashboard","slug","slugify","name","lower","panels","getPanels","panel","panelId","includes","getProjects","projects","project","getDashboardBySlug","getDefaultDashboard","keyValue","getProjectById","getProjectBySlug","createProject","description","uuid","type","payload","editProject","useServices","useContext","views","reverse","value","Error","args","Projects","Card","CardHeader","length","CardBody","className","ListGroup","flush","ListGroupItem","key","tag","Link","to","Button","ProjectsView","SimpleForm","spec","onSubmit","submitText","children","useReducer","_state","validators","validate","validator","Form","e","preventDefault","label","props","FormGroup","row","Label","for","sm","Col","Input","onChange","target","placeholder","disabled","color","CreateProject","store","useStore","history","useHistory","defaultDashboard","Container","Boolean","rows","projectId","getState","push","Project","outline","style","marginTop","right","marginRight","CardText","EditProject","SimplePanel","TYPE_TO_RENDERER","text","Panel","InternalPanel","Dashboard","NavLink","RouterLink","App","fluid","Row","md","Nav","vertical","NavItem","exact","path","component","match","params","source","window","location","hostname","DASHBOARDS_INITIAL_STATE","PANELS_INITIAL_STATE","panelsReducer","createReducer","CREATE_PANEL","KEY_VALUE_INITIAL_STATE","keyValueReducer","SET_KEY_VALUE","PROJECTS_INITIAL_STATE","projectsReducer","CREATE_PROJECT","EDIT_PROJECT","rootReducer","combineReducers","dashboardId","ordering","initialState","persistedState","JSON","parse","localStorage","getItem","configureStore","reducer","preloadedState","middleware","getDefaultMiddleware","devTools","process","subscribe","setItem","stringify","ReactDOM","render","useSelector","useDispatch","services","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g+BAMA,IAAMA,EAAkBC,0BAEXC,EAAiB,SAACC,EAAOC,GACpC,IAAMC,EAAgB,SAACC,GAGrB,OAFKA,IAAQA,EAAS,kBAAM,IAErBH,EAAMI,WAAWC,IACrBC,KAAI,SAAAC,GAAE,OAAIP,EAAMI,WAAWI,KAAKD,MAChCD,KAAI,SAAAG,GAAS,YACTA,EADS,CAEZC,KAAMC,IAAQF,EAAUG,KAAM,CAAEC,OAAO,IACvCC,OAAQC,GAAU,SAACC,GAAD,OAAWP,EAAUK,OAAOR,KAAI,qBAAGW,WAAuBC,SAASF,EAAMT,YAE5FJ,OAAOA,IAGNY,EAAY,SAACZ,GAGjB,OAFKA,IAAQA,EAAS,kBAAM,IAErBH,EAAMc,OAAOT,IACjBC,KAAI,SAAAC,GAAE,OAAIP,EAAMc,OAAON,KAAKD,MAC5BJ,OAAOA,IAMNgB,EAAc,SAAChB,GAGnB,OAFKA,IAAQA,EAAS,kBAAM,IAErBH,EAAMoB,SAASf,IACnBC,KAAI,SAAAC,GAAE,OAAIP,EAAMoB,SAASZ,KAAKD,MAC9BD,KAAI,SAAAe,GAAO,YACPA,EADO,CAEVX,KAAMC,IAAQU,EAAQT,KAAM,CAAEC,OAAO,SAEtCV,OAAOA,IAkBZ,MAAO,CACLD,gBACAa,YACAO,mBAjCyB,SAAAZ,GAAI,OAAIR,GAAc,SAAAO,GAAS,OAAIA,EAAUC,OAASA,KAAM,IAkCrFa,oBAjC0B,kBAAMrB,GAAc,SAAAO,GAAS,OAAIA,EAAUF,KAAOP,EAAMwB,SAAS,wBAAsB,IAkCjHL,cACAM,eArBqB,SAAClB,GAAD,OAAQY,GAAY,SAACE,GAAD,OAAaA,EAAQd,KAAOA,KAAI,IAsBzEmB,iBArBuB,SAAChB,GAAD,OAAUS,GAAY,SAACE,GAAD,OAAaA,EAAQX,OAASA,KAAM,IAsBjFiB,cApBoB,SAACf,EAAMgB,GAC3B,IAAMrB,EAAKsB,MAIX,OAFA5B,EAAS,CAAE6B,KAAM,iBAAkBC,QAAS,CAAExB,KAAIK,OAAMgB,iBAEjDrB,GAgBPyB,YAbkB,SAACzB,EAAIK,EAAMgB,GAC7B3B,EAAS,CAAE6B,KAAM,eAAgBC,QAAS,CAAExB,KAAIK,OAAMgB,oBA8B7CK,EAAc,kBAAMC,qBAAWrC,ICvFtCsC,EAAQ,CACZ,4BAA6B,SAACzB,GAAD,2CAAwCA,IACrE,wBAAyB,SAACA,GAAD,uCAAoCA,IAC7D,yBAA0B,0BAC1B,0BAA2B,2BAC3B,wBAAyB,SAACA,GAAD,uCAAoCA,KAGlD0B,EAAU,SAACxB,GACtB,IAAMyB,EAAQF,EAAMvB,GACpB,IAAKyB,EACH,MAAM,IAAIC,MAAJ,iCAAoC1B,IAG5C,GAAqB,oBAAVyB,EAAsB,CAAC,IAAD,uBANFE,EAME,iCANFA,EAME,kBAC/B,OAAOF,EAAK,WAAL,EAASE,GAGlB,OAAOF,G,8NCRF,IAAMG,EAAW,WAAO,IAGvBpB,GAAWD,EAFOc,IAAhBd,eAIR,OACE,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iBAGCtB,EAASuB,OAAS,GACjB,kBAACC,EAAA,EAAD,CAAUC,UAAU,QAClB,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACb3B,EAASd,KAAI,SAAAe,GAAO,OACnB,kBAAC2B,EAAA,EAAD,CACEC,IAAK5B,EAAQd,GACb2C,IAAKC,IACLC,GAAIhB,EAAQ,wBAAyBf,EAAQX,OAE5CW,EAAQT,WAMnB,kBAACgC,EAAA,EAAD,CAAUC,UAAU,eAClB,kBAACQ,EAAA,EAAD,CAAQH,IAAKC,IAAMC,GAAIhB,EAAQ,4BAA/B,uBAQKkB,EAAe,kBAAM,kBAAC,EAAD,OAE5BC,EAAa,SAAC,GAAoD,IAAlD/C,EAAiD,EAAjDA,KAAMgD,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAAe,EAC3CC,sBAAW,SAACC,EAAD,OAAWZ,EAAX,EAAWA,IAAKZ,EAAhB,EAAgBA,MAAhB,O,yWAAA,IAAkCwB,EAAlC,eAA2CZ,EAAMZ,MAAU7B,GAD3B,mBAC9DR,EAD8D,KACvDC,EADuD,KAG/D6D,EAAa,GAHkD,uBAIrE,YAAgCN,EAAKrD,QAAO,qBAAG4D,YAA/C,+CAAyE,CAAC,IAAD,UAA5Dd,EAA4D,EAA5DA,IAAKc,EAAuD,EAAvDA,SAChBD,EAAWb,GAAOc,GALiD,kFAQrE,IAAMA,EAAW,SAAC/D,GAChB,IAAK,IAAMiD,KAAOa,EAAY,CAI5B,KAAKE,EAHaF,EAAWb,IACfjD,EAAMiD,IAGlB,OAAO,EAIX,OAAO,GAGT,OACE,kBAACgB,EAAA,EAAD,CACER,SAAU,SAACS,GACTA,EAAEC,iBACEJ,EAAS/D,IACXyD,EAASzD,KAIZwD,EAAKlD,KAAI,gBAAG2C,EAAH,EAAGA,IAAKmB,EAAR,EAAQA,MAAOtC,EAAf,EAAeA,KAAMuC,EAArB,EAAqBA,MAArB,OACR,kBAACC,EAAA,EAAD,CAAWrB,IAAKA,EAAKsB,KAAG,GACtB,kBAACC,EAAA,EAAD,CAAOC,IAAKxB,EAAKyB,GAAI,EAAG7B,UAAU,cAAcuB,GAChD,kBAACO,EAAA,EAAD,CAAKD,GAAI,IACP,kBAACE,EAAA,EAAD,eACE9C,KAAMA,EACNvB,GAAI0C,EACJrC,KAAMqC,EACNZ,MAAOrC,EAAMiD,GACb4B,SAAU,SAAAX,GAAC,OAAIjE,EAAS,CAAEgD,MAAKZ,MAAO6B,EAAEY,OAAOzC,SAC/C0C,YAAavE,EAAKyC,IAAQmB,GACrBC,GAAS,UAKtB,kBAACC,EAAA,EAAD,CAAWzB,UAAU,cAClBc,EACD,kBAACN,EAAA,EAAD,CAAQ2B,UAAWjB,EAAS/D,GAAQiF,MAAM,UAAUpC,UAAU,QAAQa,MAMjEwB,EAAgB,WAC3B,IAAMC,EAAQC,cACRC,EAAUC,cAFiB,EAGcrD,IAAvCN,EAHyB,EAGzBA,cAEF4D,GAAmBhE,EALQ,EAGVA,uBAIvB,OACE,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,uBACA,kBAACE,EAAA,EAAD,KACE,kBAAC4C,EAAA,EAAD,KACE,kBAAC,EAAD,CACEhF,KAAM,CAAEI,KAAM,GAAIgB,YAAa,IAC/B4B,KAAM,CACJ,CACEP,IAAK,OACLmB,MAAO,OACPtC,KAAM,OACNiC,SAAU0B,SAEZ,CACExC,IAAK,cACLmB,MAAO,cACPtC,KAAM,WACNiC,SAAU0B,QACVpB,MAAO,CACLqB,KAAM,MAIZjC,SAAU,YAA4B,IAAzB7C,EAAwB,EAAxBA,KAAMgB,EAAkB,EAAlBA,YACX+D,EAAYhE,EAAcf,EAAMgB,GAEhCP,GAAUI,EADW1B,EAAeoF,EAAMS,WAAYT,EAAMlF,UAA1DwB,gBACuBkE,GAC/BN,EAAQQ,KAAKzD,EAAQ,wBAAyBf,EAAQX,QAExDgD,WAAW,sBAEX,kBAACL,EAAA,EAAD,CAAQH,IAAKC,IAAMC,GAAIhB,EAAQ,4BAA6BmD,EAAiB7E,OAA7E,eAQCoF,EAAU,SAAC,GAAiC,IAA/BlF,EAA8B,EAA9BA,KAAMgB,EAAwB,EAAxBA,YAAalB,EAAW,EAAXA,KAC3C,OACE,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYG,UAAU,4BACnBjC,EACD,kBAACyC,EAAA,EAAD,CACE0C,SAAO,EACPd,MAAM,YACNpC,UAAU,oBACVmD,MAAO,CAAEC,WAAY,EAAGC,MAAO,EAAGC,YAAa,GAC/CjD,IAAKC,IACLC,GAAIhB,EAAQ,wBAAyB1B,IANvC,iBASF,kBAACkC,EAAA,EAAD,KACE,kBAAC4C,EAAA,EAAD,KAC0B,kBAAhB5D,EAA2B,kBAACwE,EAAA,EAAD,KAAWxE,GAA0BA,MAOrEyE,EAAc,SAAC,GAA+B,IAA7B9F,EAA4B,EAA5BA,GAAIK,EAAwB,EAAxBA,KAAMgB,EAAkB,EAAlBA,YAChCuD,EAAQC,cACRC,EAAUC,cAFwC,EAGXrD,IAArCD,EAHgD,EAGhDA,YAEFuD,GAAmBhE,EAL+B,EAGnCA,uBAIrB,OACE,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qBACA,kBAACE,EAAA,EAAD,KACE,kBAAC4C,EAAA,EAAD,KACE,kBAAC,EAAD,CACEhF,KAAM,CAAEI,OAAMgB,eACd4B,KAAM,CACJ,CACEP,IAAK,OACLmB,MAAO,OACPtC,KAAM,OACNiC,SAAU0B,SAEZ,CACExC,IAAK,cACLmB,MAAO,cACPtC,KAAM,WACNiC,SAAU0B,QACVpB,MAAO,CACLqB,KAAM,MAIZjC,SAAU,YAA4B,IAAzB7C,EAAwB,EAAxBA,KAAMgB,EAAkB,EAAlBA,YACjBI,EAAYzB,EAAIK,EAAMgB,GADa,IAG7BP,GAAUI,EADW1B,EAAeoF,EAAMS,WAAYT,EAAMlF,UAA1DwB,gBACuBlB,GAC/B8E,EAAQQ,KAAKzD,EAAQ,wBAAyBf,EAAQX,QAExDgD,WAAW,gBAEX,kBAACL,EAAA,EAAD,CAAQH,IAAKC,IAAMC,GAAIhB,EAAQ,4BAA6BmD,EAAiB7E,OAA7E,eC5MN4F,EAAc,SAAC,GAAD,IAAG1F,EAAH,EAAGA,KAAM+C,EAAT,EAASA,SAAT,OAClB,kBAAClB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAa9B,GACb,kBAACgC,EAAA,EAAD,KAAWe,KAMT4C,EAAmB,CACvBC,KAHgB,SAAC,GAAD,IAAG5F,EAAH,EAAGA,KAAMJ,EAAT,EAASA,KAAT,OAAoB,kBAAC,EAAD,CAAaI,KAAMA,GAAOJ,IAI9DY,SAAUoB,GAGCiE,EAAQ,SAAC,GAA0B,IAAxB7F,EAAuB,EAAvBA,KAAMkB,EAAiB,EAAjBA,KAAMtB,EAAW,EAAXA,KAC5BkG,EAAgBH,EAAiBzE,GAEvC,OAAO,kBAAC4E,EAAD,CAAe9F,KAAMA,EAAMJ,KAAMA,KClB7BmG,EAAY,SAAC,GAAgB,IAAd7F,EAAa,EAAbA,OAC1B,OACE,oCACGA,EAAOR,KAAI,SAAAU,GAAK,OACf,kBAAC,EAAD,CACEiC,IAAKjC,EAAMT,GACXK,KAAMI,EAAMJ,KACZkB,KAAMd,EAAMc,KACZtB,KAAMQ,EAAMR,YCChBoG,GAAU,SAACvC,GAAD,OAAW,kBAAC,IAAD,eAAMnB,IAAK2D,KAAgBxC,KAwFvCyC,OAtFf,WAAgB,IAAD,EACwE7E,IAA7E/B,EADK,EACLA,cAAeoB,EADV,EACUA,mBAAoBC,EAD9B,EAC8BA,oBAAqBG,EADnD,EACmDA,iBAE1D6D,EAAmBhE,IACnBnB,EAAaF,IACnB,OACE,kBAACsF,EAAA,EAAD,CAAWuB,OAAK,EAAClE,UAAU,QACzB,kBAACmE,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAD,CAAKsC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAKC,UAAQ,GACV/G,EAAWE,KAAI,SAAAG,GAAS,OACvB,kBAAC2G,EAAA,EAAD,CAASnE,IAAKxC,EAAUF,IACtB,kBAAC,GAAD,CAAS6C,GAAIhB,EAAQ,4BAA6B3B,EAAUC,OAAQD,EAAUG,WAIpF,6BACA,kBAACsG,EAAA,EAAD,CAAKC,UAAQ,GACX,kBAACC,EAAA,EAAD,KACE,kBAAC,GAAD,CAAShE,GAAIhB,EAAQ,2BAArB,eAIN,kBAACuC,EAAA,EAAD,CAAKsC,GAAG,MACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEI,OAAK,EACLC,KAAK,IACLC,UAAW,kBAAM,kBAAC,IAAD,CAAUnE,GAAIhB,EAAQ,4BAA6BmD,EAAiB7E,WAEvF,kBAAC,IAAD,CACE2G,OAAK,EACLC,KAAMlF,EAAQ,4BAA6B,SAC3CmF,UAAW,YAAsC,IAAhB7G,EAAe,EAAlC8G,MAASC,OAAU/G,KACvBI,EAAWQ,EAAmBZ,GAA9BI,OAER,OAAO,kBAAC,EAAD,CAAWA,OAAQA,OAG9B,kBAAC,IAAD,CACEuG,OAAK,EACLC,KAAMlF,EAAQ,0BACdmF,UAAWjE,IAEb,kBAAC,IAAD,CACE+D,OAAK,EACLC,KAAMlF,EAAQ,2BACdmF,UAAWrC,IAEb,kBAAC,IAAD,CACEmC,OAAK,EACLC,KAAMlF,EAAQ,wBAAyB,SACvCmF,UAAW,YAAsC,IAAhB7G,EAAe,EAAlC8G,MAASC,OAAU/G,KAAe,EAChBgB,EAAiBhB,GAAvCE,EADsC,EACtCA,KAAMgB,EADgC,EAChCA,YAEd,OACE,kBAAC,EAAD,CACEhB,KAAMA,EACNgB,YAAa,kBAAC,IAAD,CAAU8F,OAAQ9F,IAC/BlB,KAAMA,OAKd,kBAAC,IAAD,CACE2G,OAAK,EACLC,KAAMlF,EAAQ,wBAAyB,SACvCmF,UAAW,YAAsC,IAAhB7G,EAAe,EAAlC8G,MAASC,OAAU/G,KAAe,EACZgB,EAAiBhB,GAA3CH,EADsC,EACtCA,GAAIK,EADkC,EAClCA,KAAMgB,EAD4B,EAC5BA,YAElB,OACE,kBAAC,EAAD,CACErB,GAAIA,EACJK,KAAMA,EACNgB,YAAaA,YC7Eb6D,QACW,cAA7BkC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2D,sBClBOM,GAA2B,CAAEtH,KAAM,GAAIH,IAAK,I,6kBCElD,ICFM0H,GAAuB,CAAEvH,KAAM,GAAIH,IAAK,ICGxC2H,GAAgBC,YAAcF,GAAsB,CAC/DG,aAAc,SAAClI,EAAD,GAAmD,IAAD,IAAxC+B,QAAWxB,EAA6B,EAA7BA,GAAIK,EAAyB,EAAzBA,KAAMkB,EAAmB,EAAnBA,KAAMtB,EAAa,EAAbA,KACjDR,EAAMQ,KAAKD,GAAM,CACfA,KACAK,OACAkB,OACAtB,QAEFR,EAAMK,IAAIwF,KAAKtF,MCXN4H,GAA0B,G,+NCGhC,IAAMC,GAAkBH,YAAcE,GAAyB,CACpEE,cAAe,SAACrI,EAAD,WAAU+B,QAAWkB,EAArB,EAAqBA,IAAKZ,EAA1B,EAA0BA,MAA1B,O,2WAAA,IAA6CrC,EAA7C,eAAqDiD,EAAMZ,OCJ/DiG,GAAyB,CAAE9H,KAAM,GAAIH,IAAK,ICG1CkI,GAAkBN,YAAcK,GAAwB,CACnEE,eAAgB,SAACxI,EAAD,GAAoD,IAAD,IAAzC+B,QAAWxB,EAA8B,EAA9BA,GAAIK,EAA0B,EAA1BA,KAAMgB,EAAoB,EAApBA,YAC7C5B,EAAMQ,KAAKD,GAAM,CACfA,KACAK,OACAgB,eAEF5B,EAAMK,IAAIwF,KAAKtF,IAEjBkI,aAAc,SAACzI,EAAD,GAAoD,IAAD,IAAzC+B,QAAWxB,EAA8B,EAA9BA,GAAIK,EAA0B,EAA1BA,KAAMgB,EAAoB,EAApBA,YAC3C5B,EAAMQ,KAAKD,GAAIK,KAAOA,EACtBZ,EAAMQ,KAAKD,GAAIqB,YAAcA,KCPpB8G,GAAcC,2BAAgB,CACzCvI,WPN+B,WAA0D,IAAzDJ,EAAwD,uDAAhD8H,GAAgD,yCAApBhG,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC1E,OAAQD,GACN,IAAK,mBACH,OAAO,MACF9B,EADL,CAEEQ,KAAK,MACAR,EAAMQ,KADP,eAEDuB,EAAQxB,GAAK,CACZA,GAAIwB,EAAQxB,GACZK,KAAMmB,EAAQnB,KACdE,OAAQ,MAGZT,IAAI,GAAD,oBAAML,EAAMK,KAAZ,CAAiB0B,EAAQxB,OAGhC,IAAK,YACH,OAAO,MACFP,EADL,CAEEQ,KAAK,MACAR,EAAMQ,KADP,eAEDuB,EAAQ6G,YAFP,MAGG5I,EAAMQ,KAAKuB,EAAQ6G,aAHtB,CAIA9H,OAAO,GAAD,oBACDd,EAAMQ,KAAKuB,EAAQ6G,aAAa9H,QAD/B,CAEJ,CACE+H,SAAU7I,EAAMQ,KAAKuB,EAAQ6G,aAAa9H,OAAO6B,OACjD1B,QAASc,EAAQd,iBAO7B,QACE,OAAOjB,IO5BXc,OAAQkH,GACRxG,SAAU4G,GACVhH,SAAUmH,KCNCO,GAAe,CAC1B1I,WAAY0H,GACZhH,OAAQiH,GACRvG,SAAU2G,GACV/G,SAAUkH,ICMNS,GAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAEjDhE,GAAQiE,YAAe,CAC3BC,WACAC,eAAgBP,IAAkBD,GAClCS,WAAYC,cACZC,UAAUC,IAOZ,GAJAvE,GAAMwE,WAAU,WACdT,aAAaU,QAAQ,QAASZ,KAAKa,UAAU1E,GAAMS,iBAGhDmD,GAAgB,CACnB,IAAMH,GAAc/G,MACdZ,GAAUY,MAEhBsD,GAAMlF,SAAS,CAAE6B,KAAM,mBAAoBC,QAAS,CAAExB,GAAIqI,GAAahI,KAAM,eAC7EuE,GAAMlF,SAAS,CAAE6B,KAAM,gBAAiBC,QAAS,CAAEkB,IAAK,oBAAqBZ,MAAOuG,MACpFzD,GAAMlF,SAAS,CAAE6B,KAAM,eAAgBC,QAAS,CAAExB,GAAIU,GAASL,KAAM,WAAYkB,KAAM,cACvFqD,GAAMlF,SAAS,CAAE6B,KAAM,YAAaC,QAAS,CAAE6G,eAAa3H,cAG9D6I,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAU5E,MAAOA,IACf,mBjBgC0B,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAC3B3D,EAAQgK,aAAY,SAAAhK,GAAK,OAAIA,KAC7BC,EAAWgK,cAEXC,EAAWnK,EAAeC,EAAOC,GAEvC,OACE,kBAACJ,EAAgBsK,SAAjB,CACE9H,MAAO6H,GAENvG,KiB1CD,KACE,kBAAC,GAAD,SAINyG,SAASC,eAAe,SXmFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e373f9b2.chunk.js","sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport uuid from 'uuid/v4';\nimport { element, node, oneOf } from 'prop-types';\nimport slugify from 'slug';\n\nconst ServicesContext = createContext();\n\nexport const createServices = (state, dispatch) => {\n  const getDashboards = (filter) => {\n    if (!filter) filter = () => true;\n\n    return state.dashboards.ids\n      .map(id => state.dashboards.data[id])\n      .map(dashboard => ({\n        ...dashboard,\n        slug: slugify(dashboard.name, { lower: true }),\n        panels: getPanels((panel) => dashboard.panels.map(({ panelId }) => panelId).includes(panel.id))\n      }))\n      .filter(filter);\n  };\n\n  const getPanels = (filter) => {\n    if (!filter) filter = () => true;\n\n    return state.panels.ids\n      .map(id => state.panels.data[id])\n      .filter(filter);\n  };\n\n  const getDashboardBySlug = slug => getDashboards(dashboard => dashboard.slug === slug)[0];\n  const getDefaultDashboard = () => getDashboards(dashboard => dashboard.id === state.keyValue['default-dashboard'])[0];\n\n  const getProjects = (filter) => {\n    if (!filter) filter = () => true;\n\n    return state.projects.ids\n      .map(id => state.projects.data[id])\n      .map(project => ({\n        ...project,\n        slug: slugify(project.name, { lower: true }),\n      }))\n      .filter(filter);\n  };\n\n  const getProjectById = (id) => getProjects((project) => project.id === id)[0];\n  const getProjectBySlug = (slug) => getProjects((project) => project.slug === slug)[0];\n\n  const createProject = (name, description) => {\n    const id = uuid();\n\n    dispatch({ type: 'CREATE_PROJECT', payload: { id, name, description } });\n\n    return id;\n  };\n\n  const editProject = (id, name, description) => {\n    dispatch({ type: 'EDIT_PROJECT', payload: { id, name, description } });\n  };\n\n  return {\n    getDashboards,\n    getPanels,\n    getDashboardBySlug,\n    getDefaultDashboard,\n    getProjects,\n    getProjectById,\n    getProjectBySlug,\n    createProject,\n    editProject,\n  };\n};\n\nexport const ServicesProvider = ({ children }) => {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const services = createServices(state, dispatch);\n\n  return (\n    <ServicesContext.Provider\n      value={services}\n    >\n      {children}\n    </ServicesContext.Provider>\n  );\n};\nexport const useServices = () => useContext(ServicesContext);\n\nServicesProvider.propTypes = {\n  children: oneOf([element, node])\n};\n","const views = {\n  'dashboards-dashboard-view': (slug) => `/dashboards/dashboard/view/${slug}`,\n  'projects-project-view': (slug) => `/projects/project/view/${slug}`,\n  'projects-projects-view': '/projects/projects/view',\n  'projects-project-create': '/projects/project/create',\n  'projects-project-edit': (slug) => `/projects/project/edit/${slug}`,\n};\n\nexport const reverse = (name, ...args) => {\n  const value = views[name];\n  if (!value) {\n    throw new Error(`unknown view with name ${name}`);\n  }\n\n  if (typeof value === 'function') {\n    return value(...args);\n  }\n\n  return value;\n};\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ListGroup, ListGroupItem, FormGroup, Col, Input, Form, Label, Button, Container, Card, CardHeader, CardBody, CardText } from 'reactstrap';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useServices, createServices } from '../state/services';\nimport { reverse } from '../routing';\nimport { useStore } from 'react-redux';\n\nexport const Projects = () => {\n  const { getProjects } = useServices();\n\n  const projects = getProjects();\n\n  return (\n    <Card>\n      <CardHeader>\n        Projects\n      </CardHeader>\n      {projects.length > 0 && (\n        <CardBody className=\"pb-0\">\n          <ListGroup flush>\n            {projects.map(project => (\n              <ListGroupItem\n                key={project.id}\n                tag={Link}\n                to={reverse('projects-project-view', project.slug)}\n              >\n                {project.name}\n              </ListGroupItem>\n            ))}\n          </ListGroup>\n        </CardBody>\n      ) }\n      <CardBody className=\"text-center\">\n        <Button tag={Link} to={reverse('projects-project-create')}>\n          + Create project\n        </Button>\n      </CardBody>\n    </Card>\n  );\n}\n\nexport const ProjectsView = () => <Projects />;\n\nconst SimpleForm = ({ data, spec, onSubmit, submitText, children }) => {\n  const [state, dispatch] = useReducer((_state, { key, value }) => ({ ..._state, [key]: value }), data);\n\n  const validators = {};\n  for (const { key, validate } of spec.filter(({ validate }) => validate)) {\n    validators[key] = validate;\n  }\n\n  const validate = (state) => {\n    for (const key in validators) {\n      const validator = validators[key];\n      const value = state[key];\n\n      if (!validator(value)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (validate(state)) {\n          onSubmit(state);\n        }\n      }}\n    >\n      {spec.map(({ key, label, type, props }) => (\n        <FormGroup key={key} row>\n          <Label for={key} sm={2} className=\"text-right\">{label}</Label>\n          <Col sm={10}>\n            <Input\n              type={type}\n              id={key}\n              name={key}\n              value={state[key]}\n              onChange={e => dispatch({ key, value: e.target.value })}\n              placeholder={data[key] || label}\n              {...(props || {})}\n            />\n          </Col>\n        </FormGroup>\n      ))}\n      <FormGroup className=\"text-right\">\n        {children}\n        <Button disabled={!validate(state)} color=\"primary\" className=\"ml-3\">{submitText}</Button>\n      </FormGroup>\n    </Form>\n  );\n}\n\nexport const CreateProject = () => {\n  const store = useStore();\n  const history = useHistory();\n  const { createProject, getDefaultDashboard } = useServices();\n\n  const defaultDashboard = getDefaultDashboard();\n\n  return (\n    <Card>\n      <CardHeader>Create project</CardHeader>\n      <CardBody>\n        <Container>\n          <SimpleForm\n            data={{ name: '', description: '' }}\n            spec={[\n              {\n                key: 'name',\n                label: 'Name',\n                type: 'text',\n                validate: Boolean\n              },\n              {\n                key: 'description',\n                label: 'Description',\n                type: 'textarea',\n                validate: Boolean,\n                props: {\n                  rows: 10\n                }\n              }\n            ]}\n            onSubmit={({ name, description }) => {\n              const projectId = createProject(name, description);\n              const { getProjectById } = createServices(store.getState(), store.dispatch);\n              const project = getProjectById(projectId);\n              history.push(reverse('projects-project-view', project.slug));\n            }}\n            submitText=\"Create new project\"\n          >\n            <Button tag={Link} to={reverse('dashboards-dashboard-view', defaultDashboard.slug)}>Cancel</Button>\n          </SimpleForm>\n        </Container>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport const Project = ({ name, description, slug }) => {\n  return (\n    <Card>\n      <CardHeader className=\"d-flex position-relative\">\n        {name}\n        <Button\n          outline\n          color=\"secondary\"\n          className=\"position-absolute\"\n          style={{ marginTop: -7, right: 0, marginRight: 5 }}\n          tag={Link}\n          to={reverse('projects-project-edit', slug)}\n        >Edit project</Button>\n      </CardHeader>\n      <CardBody>\n        <Container>\n          {typeof description === 'string' ? <CardText>{description}</CardText> : description}\n        </Container>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport const EditProject = ({ id, name, description }) => {\n  const store = useStore();\n  const history = useHistory();\n  const { editProject, getDefaultDashboard } = useServices();\n\n  const defaultDashboard = getDefaultDashboard();\n\n  return (\n    <Card>\n      <CardHeader>Edit project</CardHeader>\n      <CardBody>\n        <Container>\n          <SimpleForm\n            data={{ name, description }}\n            spec={[\n              {\n                key: 'name',\n                label: 'Name',\n                type: 'text',\n                validate: Boolean\n              },\n              {\n                key: 'description',\n                label: 'Description',\n                type: 'textarea',\n                validate: Boolean,\n                props: {\n                  rows: 10\n                }\n              }\n            ]}\n            onSubmit={({ name, description }) => {\n              editProject(id, name, description);\n              const { getProjectById } = createServices(store.getState(), store.dispatch);\n              const project = getProjectById(id);\n              history.push(reverse('projects-project-view', project.slug));\n            }}\n            submitText=\"Save changes\"\n          >\n            <Button tag={Link} to={reverse('dashboards-dashboard-view', defaultDashboard.slug)}>Cancel</Button>\n          </SimpleForm>\n        </Container>\n      </CardBody>\n    </Card>\n  );\n};\n\nProject.propTypes = {\n  name: PropTypes.string.isRequired,\n  description: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  slug: PropTypes.string.isRequired,\n};\n\nEditProject.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardHeader, CardBody } from 'reactstrap';\nimport { Projects } from './Project';\n\nconst SimplePanel = ({ name, children }) => (\n  <Card>\n    <CardHeader>{name}</CardHeader>\n    <CardBody>{children}</CardBody>\n  </Card>\n);\n\nconst TextPanel = ({ name, data }) => <SimplePanel name={name}>{data}</SimplePanel>;\n\nconst TYPE_TO_RENDERER = {\n  text: TextPanel,\n  projects: Projects,\n};\n\nexport const Panel = ({ name, type, data }) => {\n  const InternalPanel = TYPE_TO_RENDERER[type];\n\n  return <InternalPanel name={name} data={data} />\n};\n\nPanel.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  data: PropTypes.any.isRequired,\n};\n\nTextPanel.propTypes = {\n  name: PropTypes.string.isRequired,\n  data: PropTypes.string.isRequired,\n};\n\nSimplePanel.propTypes = {\n  name: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Panel } from './Panel';\n\nexport const Dashboard = ({ panels }) => {\n  return (\n    <>\n      {panels.map(panel => (\n        <Panel\n          key={panel.id}\n          name={panel.name}\n          type={panel.type}\n          data={panel.data}\n        />\n      ))}\n    </>\n  );\n};\n\nDashboard.propTypes = {\n  panels: PropTypes.array.isRequired,\n};\n","import React from 'react';\n\nimport { Container, Row, Col, Nav, NavItem, NavLink as Link } from 'reactstrap';\nimport { Switch, Route, Redirect } from 'react-router';\nimport { NavLink as RouterLink } from 'react-router-dom';\nimport Markdown from 'react-markdown';\n\nimport { Dashboard } from './components/Dashboard';\nimport { useServices } from './state/services';\n\nimport { reverse } from './routing';\nimport { ProjectsView, CreateProject, Project, EditProject } from './components/Project';\n\nconst NavLink = (props) => <Link tag={RouterLink} {...props} />\n\nfunction App() {\n  const { getDashboards, getDashboardBySlug, getDefaultDashboard, getProjectBySlug } = useServices();\n\n  const defaultDashboard = getDefaultDashboard();\n  const dashboards = getDashboards();\n  return (\n    <Container fluid className=\"my-3\">\n      <Row>\n        <Col md=\"2\">\n          <Nav vertical>\n            {dashboards.map(dashboard => (\n              <NavItem key={dashboard.id}>\n                <NavLink to={reverse('dashboards-dashboard-view', dashboard.slug)}>{dashboard.name}</NavLink>\n              </NavItem>\n            ))}\n          </Nav>\n          <hr />\n          <Nav vertical>\n            <NavItem>\n              <NavLink to={reverse('projects-projects-view')}>Projects</NavLink>\n            </NavItem>\n          </Nav>\n        </Col>\n        <Col md=\"10\">\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={() => <Redirect to={reverse('dashboards-dashboard-view', defaultDashboard.slug)} />}\n            />\n            <Route\n              exact\n              path={reverse('dashboards-dashboard-view', ':slug')}\n              component={({ match: { params: { slug } } }) => {\n                const { panels } = getDashboardBySlug(slug);\n\n                return <Dashboard panels={panels} />;\n              }}\n            />\n            <Route\n              exact\n              path={reverse('projects-projects-view')}\n              component={ProjectsView}\n            />\n            <Route\n              exact\n              path={reverse('projects-project-create')}\n              component={CreateProject}\n            />\n            <Route\n              exact\n              path={reverse('projects-project-view', ':slug')}\n              component={({ match: { params: { slug } } }) => {\n                const { name, description } = getProjectBySlug(slug);\n\n                return (\n                  <Project\n                    name={name}\n                    description={<Markdown source={description} />}\n                    slug={slug}\n                  />\n                );\n              }}\n            />\n            <Route\n              exact\n              path={reverse('projects-project-edit', ':slug')}\n              component={({ match: { params: { slug } } }) => {\n                const { id, name, description } = getProjectBySlug(slug);\n\n                return (\n                  <EditProject\n                    id={id}\n                    name={name}\n                    description={description}\n                  />\n                );\n              }}\n            />\n          </Switch>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const DASHBOARDS_INITIAL_STATE = { data: {}, ids: [] };\n","import { DASHBOARDS_INITIAL_STATE } from \"../initialStates/dashboards\";\n\nexport const dashboardsReducer = (state = DASHBOARDS_INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case 'CREATE_DASHBOARD':\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [payload.id]: {\n            id: payload.id,\n            name: payload.name,\n            panels: []\n          }\n        },\n        ids: [...state.ids, payload.id]\n      };\n\n    case 'ADD_PANEL':\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [payload.dashboardId]: {\n            ...state.data[payload.dashboardId],\n            panels: [\n              ...state.data[payload.dashboardId].panels,\n              {\n                ordering: state.data[payload.dashboardId].panels.length,\n                panelId: payload.panelId\n              }\n            ]\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n","export const PANELS_INITIAL_STATE = { data: {}, ids: [] };\n","import { createReducer } from '@reduxjs/toolkit';\nimport { PANELS_INITIAL_STATE } from \"../initialStates/panels\";\n\nexport const panelsReducer = createReducer(PANELS_INITIAL_STATE, {\n  CREATE_PANEL: (state, { payload: { id, name, type, data } }) => {\n    state.data[id] = {\n      id,\n      name,\n      type,\n      data\n    };\n    state.ids.push(id);\n  }\n});\n","export const KEY_VALUE_INITIAL_STATE = {};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { KEY_VALUE_INITIAL_STATE } from '../initialStates/key-value';\n\nexport const keyValueReducer = createReducer(KEY_VALUE_INITIAL_STATE, {\n  SET_KEY_VALUE: (state, { payload: { key, value }}) => ({ ...state, [key]: value })\n});\n","export const PROJECTS_INITIAL_STATE = { data: {}, ids: [] };\n","import { createReducer } from '@reduxjs/toolkit';\nimport { PROJECTS_INITIAL_STATE } from \"../initialStates/projects\";\n\nexport const projectsReducer = createReducer(PROJECTS_INITIAL_STATE, {\n  CREATE_PROJECT: (state, { payload: { id, name, description } }) => {\n    state.data[id] = {\n      id,\n      name,\n      description,\n    };\n    state.ids.push(id);\n  },\n  EDIT_PROJECT: (state, { payload: { id, name, description } }) => {\n    state.data[id].name = name;\n    state.data[id].description = description;\n  },\n});\n","import { combineReducers } from \"redux\";\n\nimport { dashboardsReducer } from './dashboards';\nimport { panelsReducer } from './panels';\nimport { keyValueReducer } from \"./key-value\";\nimport { projectsReducer } from \"./projects\";\n\nexport const rootReducer = combineReducers({\n  dashboards: dashboardsReducer,\n  panels: panelsReducer,\n  keyValue: keyValueReducer,\n  projects: projectsReducer,\n});\n","import { DASHBOARDS_INITIAL_STATE } from './dashboards';\nimport { PANELS_INITIAL_STATE } from './panels';\nimport { KEY_VALUE_INITIAL_STATE } from './key-value';\nimport { PROJECTS_INITIAL_STATE } from './projects';\n\nexport const initialState = {\n  dashboards: DASHBOARDS_INITIAL_STATE,\n  panels: PANELS_INITIAL_STATE,\n  keyValue: KEY_VALUE_INITIAL_STATE,\n  projects: PROJECTS_INITIAL_STATE,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ServicesProvider } from './state/services';\nimport { rootReducer as reducer } from './state/reducers';\nimport { initialState } from './state/initialStates';\nimport uuid from 'uuid/v4';\n\nconst persistedState = JSON.parse(localStorage.getItem('state'));\n\nconst store = configureStore({\n  reducer,\n  preloadedState: persistedState || initialState,\n  middleware: getDefaultMiddleware(),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nstore.subscribe(() => {\n  localStorage.setItem('state', JSON.stringify(store.getState()));\n});\n\nif (!persistedState) {\n  const dashboardId = uuid();\n  const panelId = uuid();\n\n  store.dispatch({ type: 'CREATE_DASHBOARD', payload: { id: dashboardId, name: 'Dashboard' } });\n  store.dispatch({ type: 'SET_KEY_VALUE', payload: { key: 'default-dashboard', value: dashboardId } });\n  store.dispatch({ type: 'CREATE_PANEL', payload: { id: panelId, name: 'Projects', type: 'projects' } });\n  store.dispatch({ type: 'ADD_PANEL', payload: { dashboardId, panelId } });\n}\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <ServicesProvider>\n        <App />\n      </ServicesProvider>\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}